import discord
import asyncio
import json
import random
from termcolor import cprint
from lchain import bor_power_mode

from langchain.agents import initialize_agent, Tool, AgentType
from langchain.chat_models import ChatOpenAI
from langchain.callbacks import get_openai_callback
from langchain.schema import SystemMessage
import sys
import asyncio
from gpt import getQuestion, translateHU, generatePrompt, generateSystemPrompt

from lchain import bor_power_mode

llm = ChatOpenAI(temperature=1, model="gpt-3.5-turbo-0613")
tools = [
    Tool(
        name="internet-search",
        func=bor_power_mode,
        description="Lehet≈ëv√© teszi az interneten val√≥ keres√©st. Id≈ëj√°r√°st vagy egy√©b val√≥s idej≈± inform√°ci√≥kat is megtud keresni. A bemenet egy keres√©si kifejez√©s."
    )
]

agent_kwargs = {
    "system_message": SystemMessage(content=generateSystemPrompt()),
}
bor = initialize_agent(llm=llm, tools=tools, agent=AgentType.OPENAI_MULTI_FUNCTIONS, agent_kwargs=agent_kwargs, verbose=True)

class ChatModule():
    errorMessages = ['Hmm... ü§î', 'H√°t figyelj √©n nem tudom', 'Fogalmam sincs mit akarsz', 'Mivan?', 'Bruh', 'üíÄ', 'lol', 'Tes√≥ mi lenne ha nem?', 'ü§°', 'Bocs √©n ezt nem', 'Nekem elveim is vannak az√©rt', 'N√©zd... ez nem m≈±k√∂dik', 'Mi lenne ha csak bar√°tokk√©nt folytatn√°nk?', "Sprechen sie deutsch?", 'Megtudn√°d ism√©telni?', 'Nem √©rtem', 'Szerintem ezt ne is pr√≥b√°ld meg √∫jra', 'Any√°d tudja hogy miket m≈±velsz itt?']
    
    def __init__(self, bot):
        self.bot = bot
        
    async def messageLogic(self, message):
        try:
            answerable_reference = False
            ref_msg = None
            if message.reference is not None:
                print('Reference found')
                ref_msg = await message.channel.fetch_message(message.reference.message_id)
                if ref_msg.author.id == self.bot.user.id:
                    answerable_reference = True
                    
            if ('Bor' in message.content or answerable_reference) and message.channel.name != 'Bor Change Log':
                async with message.channel.typing():
                    with get_openai_callback() as callback:
                        question = message.content
                        
                        if answerable_reference:
                            cprint(f"Reference message: {ref_msg.content}", 'light_yellow')
                        cprint(f"Question: {question}", 'yellow')
                        
                        answer = bor.run(question) if not answerable_reference else bor.run(f'"{ref_msg.content}"\n\n{question}')
                        
                        await self.sendChat(message, answer)
                        
                    print(f"Total Tokens: {callback.total_tokens}")
                    print(f"API call costs: ${callback.total_cost} - {callback.total_cost*340} Ft")
                    
        except Exception as e:
            raise Exception(e)
                            
    async def sendChat(self, message, text):
        print('Sending chat')
        if text.startswith('Bor:'):
            text = text[4:]
        elif text.startswith('Egy Poh√°r Bor:'):
            text = text[14:]
        await message.channel.send(text)
            