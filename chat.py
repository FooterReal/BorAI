from termcolor import cprint
from lchain import bor_power_mode
from error import MessageError

from langchain.agents import initialize_agent, Tool, AgentType
from langchain.chat_models import ChatOpenAI
from langchain.callbacks import get_openai_callback
from langchain.schema import SystemMessage
from langchain.tools import StructuredTool
from gpt import getQuestion, translateHU, generatePrompt, generateSystemPrompt

import asyncio
import re

from lchain import bor_power_mode

class ChatModule():
    errorMessages = ['Hmm... ü§î', 'H√°t figyelj √©n nem tudom', 'Fogalmam sincs mit akarsz', 'Mivan?', 'Bruh', 'üíÄ', 'lol', 'Tes√≥ mi lenne ha nem?', 'ü§°', 'Bocs √©n ezt nem', 'Nekem elveim is vannak az√©rt', 'N√©zd... ez nem m≈±k√∂dik', 'Mi lenne ha csak bar√°tokk√©nt folytatn√°nk?', "Sprechen sie deutsch?", 'Megtudn√°d ism√©telni?', 'Nem √©rtem', 'Szerintem ezt ne is pr√≥b√°ld meg √∫jra', 'Any√°d tudja hogy miket m≈±velsz itt?', 'J√°tsszuk azt, hogy √©n ezt most nem hallottam...']
    
    def __init__(self, bot, modules):
        self.bot = bot
        self.modules = modules
        llm = ChatOpenAI(temperature=1, model="gpt-3.5-turbo-0613")
        tools = [
            Tool(
                name="internet-search",
                func=bor_power_mode,
                description="Lehet≈ëv√© teszi az interneten val√≥ keres√©st. Id≈ëj√°r√°st vagy egy√©b val√≥s idej≈± inform√°ci√≥kat is megtud keresni. A bemenet egy keres√©si kifejez√©s."
            ),
            Tool(
                name="image-generation",
                func=self.imageGenerationTask,
                description="Gener√°l egy k√©pet a megadott prompt alapj√°n. A bemenet egy prompt √©s egy opci√≥k JSON objektum ami a k√∂vetkez≈ëket tartalmazza: Size:Tupple(2):Int, Anime:Bool. A Size a k√©p m√©ret√©t adja meg, az Anime pedig, hogy anime st√≠lusban k√©sz√ºlj√∂n-e el a k√©p."
            )
        ]

        agent_kwargs = {
            "system_message": SystemMessage(content=generateSystemPrompt()),
        }
        self.bor = initialize_agent(llm=llm, tools=tools, agent=AgentType.OPENAI_MULTI_FUNCTIONS, agent_kwargs=agent_kwargs, verbose=True)

        
    def imageGenerationTask(self, message):
        try:
            asyncio.create_task(self.modules['imgprompt'].generateImage(message))
            return "A k√©p hamarosan elk√©sz√ºl... T√°j√©koztasd a felhaszn√°l√≥d arr√≥l, hogy a k√©p hamarosan elk√©sz√ºl."
        except Exception as e:
            return f"Hiba t√∂rt√©nt a k√©p gener√°l√°sa k√∂zben: {e}"
        
    async def messageLogic(self, message):
        try:
            answerable_reference = False
            ref_msg = None
            if message.reference is not None:
                print('Reference found')
                ref_msg = await message.channel.fetch_message(message.reference.message_id)
                if ref_msg.author.id == self.bot.user.id:
                    answerable_reference = True

            channel_blacklist = ['Bor Change Log']
            match = re.search('Bor([.,:$!? ]|$)', message.content)
                    
            if (match != None or answerable_reference) and message.channel.name not in channel_blacklist:
                await self.modules['imgprompt'].changeChannel(message.channel)
                
                async with message.channel.typing():
                    with get_openai_callback() as callback:
                        question = message.content
                        
                        if answerable_reference:
                            cprint(f"Reference message: {ref_msg.content}", 'light_yellow')
                        cprint(f"Question: {question}", 'yellow')
                        
                        answer = self.bor.run(f'"{ref_msg.content}"\n\n{question}') if answerable_reference else self.bor.run(question)
                        
                        await self.sendChat(message, answer)
                        
                    print(f"Total Tokens: {callback.total_tokens}")
                    print(f"API call costs: ${callback.total_cost} - {callback.total_cost*340} Ft")
                    
        except Exception as e:
            raise MessageError(e) from e
                            
    async def sendChat(self, message, text):
        print('Sending chat')
        if text.startswith('Bor:'):
            text = text[4:]
        elif text.startswith('Egy Poh√°r Bor:'):
            text = text[14:]
        elif text.startswith('**Bor:**'):
            text = text[8:]
        await message.channel.send(text)
    
    async def commandChat(self, command, channel, data=None):
        command = f'Most egy programot fogsz futtatni, √≠rd ki a program kimenet√©t, ahogy Bor v√°laszolna a parancsra. A parancs: {command} Hozz√°tartoz√≥ adat: {data}. Add vissza a kimenetet a k√∂vetkez≈ë √ºzenetben.'
        answer = self.bor.run(command)
        
        if answer.startswith('Bor:'):
            answer = answer[4:]
        elif answer.startswith('Egy Poh√°r Bor:'):
            answer = answer[14:]
        elif answer.startswith('**Bor:**'):
            answer = answer[8:]
        
        await channel.send(answer)